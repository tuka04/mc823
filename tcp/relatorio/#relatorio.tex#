%*************************************************

\documentclass[a4paper,10pt]{article}
\usepackage[brazil]{babel}
\usepackage[utf8]{inputenc}
%codigo
\usepackage{listings} 
%\usepackage[latin1]{inputenc}
\usepackage{amsthm,amsfonts,amsmath,amssymb}
%img
\usepackage{graphicx}
\usepackage{subfig}
%tabela

%fim
%fim
\usepackage{makeidx}
\usepackage{enumerate}
\usepackage{hyperref}
\hypersetup{
  colorlinks,
  linkcolor=blue,
  filecolor=blue,
  urlcolor=blue,
  citecolor=blue 
}
%titulo
\title{Servidor Concorrente TCP}
\author{Leandro Kümmel Tria Mendes RA033910 \\ Fernando Teixeira RA085858}
\makeindex
%inicio
\begin{document}
\maketitle
\begin{figure}[!htb]
  \centering
  \includegraphics[scale=0.5]{logo.jpg}
\end{figure}
\newpage
\tableofcontents
\listoffigures
\listoftables
\newpage
\section{Introdução}
O objetivo desse projeto é implementar um sistema cliente/servidor
concorrente, com operações para o gerenciamento de livros em uma livraria.
Na comunicação entre cliente e servidor utilizou-se o protocolo TCP\footnote{
Mais informações sobre TCP \url{http://www.linktionary.com/t/tcp.html} }, da camada de transporte, e a partir da execução de testes podemos avaliar alguns aspectos
desse protocolo e posteriormente compará-lo com outro(s).
\section{Desenvolvimento}
Linux foi o sistema operacional utilizado para o desenvolvimento (distribuição
2.6.43.8-1.fc15.i686). Igualmente, para os testes utilizou-se duas máquinas com linux, porém com distribuições diferentes.
\subsection{Protocolo TCP - Transmission Control Protocol}
O protocolo TCP foi escrito de modo a garantir que os dados enviados (pelo
servido) e recebidos (pelo cliente) de forma correta, na sequência 
adequada e sem erros, pela rede.
\\As características fundamentais do TCP são:
\begin{itemize}
\item \emph{Orientado à conexão}: necessidade de uma conexão.
\item \emph{Ponto a ponto}: conexão é estabelecida entre dois pontos.
\item \emph{Confiabilidade}: Permite a recuperação de arquivos perdidos, elimina 
arquivos duplicados, recupera dados corrompidos, entrega na ordem do envio e 
pode recuperar o \"link\" entre cliente e servidor, caso esse, por algum motivo,
seja perdido.
\item \emph{Full duplex}: Possível transferência simultânea, entre cliente e 
servidor
\item \emph{Handshake}: Mecanismo de estabelecimento e finalização de conexão.
O TCP garante que, no final da conexão, \textbf{todos} os pacotes sejam entregues
/recebidos
\item \emph{Entrega ordenada}: A aplicação entrega ao TCP bloco de dados de 
tamanho variável. Esse protocolo divide estes dados em segmentos de tamanho 
especificado (valor MTU). Sabe-se que camadas inferiores a de transporte podem 
fazer com que os pacotes não cheguem na ordem em que foram enviados. Porém, o TCP
garante a reconstrução dos segmentos no cliente (TCP utiliza um número de 
sequência)
\item \emph{Controle de fluxo}: O protocolo em estudo utiliza-se de um campos 
denominado janela para controlar o fluxo
\end{itemize}
\subsection{Implementação}
O projeto conta com cinco diretórios, cada um com seu Makefile (exceto relatorio e estat), arquivos
principal (main.c e main.h) e um README.md\footnote{Leia esse arquivo antes de
executar o sistema} para instruções adicionais. Há também um Makefile, o qual 
compi
\\Os diretório são:
\begin{enumerate}[I.]
\label{sec:dirs}
\item \label{itm:common} \emph{common}: Contém arquivos de uso comum, tanto pelo servidor quanto 
pelo cliente, inclusive o arquivo que calcula a média dos testes executados.
\item \label{itm:server} \emph{server}: Contém os arquivos que preparam uma porta para esperar
conexões e manipulam o sistema de livraria.
\item \label{itm:client} \emph{client}: Funções que provêm conexão com um servidor, envio das opções
escolhidas pelo cliente e interface para as respostas do sistema de livraria
(servidor).
\item \label{itm:estat} \emph{estat}: Medidas de tempo efetuadas pelo teste.
\item \label{itm:relatorio} \emph{relatorio}
\end{enumerate}
\subsubsection{Manipulação de dados}
Todas as estruturas utilizadas para leitura/escrita dos livros são dinâmicas. \\Arquivos presentes no diretório \emph{common}[\ref{itm:common}]:
\begin{enumerate}[I.]
\item \emph{error.c error.h}: Gerencia erros que eventualmente podem ocorrer.
\item \emph{common.c common.h}: Funções de uso comum.
\item \label{itm:avl} \emph{avl.c avl.h}: Gerencia a estrutura básica da livraria, utiliza-se 
árvore AVL\footnote{ \url{http://pages.cs.wisc.edu/~ealexand/cs367/NOTES/AVL-Trees/index.html} }, pois a busca, inserção/atualização têm complexidade \boxed{O(logN)} , sendo N
o número de elementos na árvore, no caso a quantidade de livros diferentes.
\item \emph{archives.c archives.h}: Manipula arquivos. Faz a leitura do arquivo
da livraria\footnote{Ver README.md para mais detalhes do arquivo da livraria}.
\item \label{itm:tcp} \emph{tcp.c tcp.h}: Contém apenas algumas constantes.
\item \emph{books.c books.h}: Gerencia a estrutura básica de um livro e seus autores.
\item \label{itm:tempo}\emph{tempo.c tempo.h}: Gerencia a estrutura de testes, lê e escreve em arquivos localizados no diretório \emph{estat}[\ref{itm:estat}].
\item \emph{livros/livros}: Arquivo contendo os livros\footnote{Ver README.md para mais detalhes do arquivo da livraria}.
\end{enumerate}
\subsubsection{Conexão Servidor/Cliente}
Compreende dois diretórios \emph{server}[\ref{itm:server}] e \emph{client}[\ref{itm:client}]
\\\textbf{Servidor}:
\begin{enumerate}[I.]
\item \emph{server.c server.h}: Apenas inicia o servidor dada um número de uma porta.
\item \label{itm:tcpserver} \emph{tcp\_server.c tcp\_server.h}: Gerencia tanto as conexões com os clientes quanto a comunicação, em outras palavras, o tcp\_server.c recebe um stream do tcp\_client.c[\ref{itm:tcpclient}] e envia uma resposta adequada ao mesmo.
\item \emph{login.c login.h}: Gerencia o login necessário para editar a quantidade de um livro.
\end{enumerate}
\textbf{Cliente}:
\begin{enumerate}[I.]
\item \emph{client.c client.h}: Apenas inicia a comunicação com um servidor dado o endereço IP e um número de uma porta.
\item \label{itm:tcpclient} \emph{tcp\_client.c tcp\_client.h}: Gerencia tanto 
a criação de uma conexão entre o cliente e servidor quanto a leitura, da entrada dada pelo usuário do sistema, e a comunicação entre hospedeiro e cliente.
\end{enumerate}
\subsection{Coleta e gerência de dados para testes}
Para realizar os testes implementou-se alguns arquivos adicionas[\ref{itm:tempo}]. Uma constante, denominada NUM\_TESTES\footnote{Nesse sistema consideramos NUM\_TESTES igual a 100} , contém o número de testes a serem realizados, ou seja, cada opção do \emph{menu}[\ref{itm:tcpserver}] é executada NUM\_TESTE vezes. Todos os dados são 
salvos no diretório \emph{estat}[\ref{itm:estat}].
\subsection{Vantagens da implementação}
O sistema de livraria é um sistema robusto e com baixa complexidade de tempo.
A escolha da estrutura de árvore avl[\ref{itm:avl}], possibilitou em boa 
performance em questão de tempo de processamento, uma vez que, essa estrutura
mostrou-se eficaz para o problema e tem possuí melhor complexidade de tempo com 
relação a outras estruturas, além de ser de a implementação e manuntenção serem
simples.
\\ Com relação as conexões e comunicações entre cliente/servidor, vale ressaltar que há uma troca de mensagens\footnote{Sabe-se que o TCP envia/recebe streams} inicial entre os dois, na qual o conteúdo do stream
é o número de bytes da maior mensagem possível a ser enviada pelo servidor.
Como a função \boxed{rcv(int sockfd, void *buf, size_t len, int flags)}\footnote{\url{http://linux.die.net/man/2/recv}} começa a ler o buffer, o qual é escrito o stream enviado pelo servidor, antes do mesmo estar com completo, em outras palavras, antes de toda mensagem enviada pelo servidor estar escrita no buffer então, o número de bytes das mensagens mostra-se necessário, uma vez que, podemos controlar a função \boxed{rcv(int sockfd, void *buf, size_t len, int flags)}, junto ao envio de mensagens de controle (ACK\footnote{Veja tcp.h[\ref{itm:tcp}]}), afim de ler o buffer apenas quando o mesmo estiver completo.\footnote{The receive calls normally return any data available, up to the requested amount, rather than waiting for receipt of the full amount requested.}
\begin{figure}[!htb]
  \centering
  \subfloat[Fluxograma Servidor]{
  \includegraphics[width=150px,height=300px]{fluxo_servidor.png}
  \label{fluxoservidor}
  }
  \quad %espaco separador
   \subfloat[Fluxograma Cliente]{
     \label{fluxoserver}
     \includegraphics[width=150px,height=300px]{fluxo_cliente.png}
   }
   \caption{Fluxogramas}
   \label{figfluxos}
\end{figure}
\begin{figure}[!htb]
  \centering
  \label{fluxotempo}
  \includegraphics[scale=0.5]{fluxo_tempo.png}
  \caption{Definição do cálculo dos tempos}
\end{figure}
\newpage
\section{Resultados e discussões}
Os testes foram efetuados em duas máquinas, ambas conectadas à rede porém, não localmente. Denominaremos a máquina servidor como [S] e a cliente como [C]. [S] e [C] estão em continentes diferentes.
\\Foram efetuadas 100 medições para cada opção do menu[\ref{itm:tcpserver}], ao todo foram 600 medições de tempo. Dividiu-se o tempo em tempo de processamento e tempo de comunicação, sendo o último a diferença entre o tempo total e o tempo de processamento.
\subsection{Tabelas e gráficos}
\subsubsection{Tempo total}[\ref{fluxotempo}]
Representaremos todas as 100 medidas das 6 opções do menu[\ref{itm:tcpserver}]
\begin{table}
  \tiny
  \centering
  \begin{tabular}{|c|}
    \hline
    Opção 1 [ms] \\
    \hline
    \input{dados/tt_1.tex}    
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 2 [ms] \\
    \hline
    \input{dados/tt_2.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 3 [ms] \\
    \hline
    \input{dados/tt_3.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 4 [ms] \\
    \hline
    \input{dados/tt_4.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 5 [ms] \\
    \hline
    \input{dados/tt_5.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 6 [ms] \\
    \hline
    \input{dados/tt_6.tex}
    \hline
  \end{tabular}
  \caption{Tabela de tempo total}
\end{table}
\newpage
\subsubsection{Tempo de processamento}[\ref{fluxotempo}]
Representaremos todas as 100 medidas das 6 opções do menu[\ref{itm:tcpserver}]
\begin{table}
  \tiny
  \centering
  \begin{tabular}{|c|}
    \hline
    Opção 1 [ms] \\
    \hline
    \input{dados/tp_1.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 2 [ms] \\
    \hline
    \input{dados/tp_2.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 3 [ms] \\
    \hline
    \input{dados/tp_3.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 4 [ms] \\
    \hline
    \input{dados/tp_4.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 5 [ms] \\
    \hline
    \input{dados/tp_5.tex}
    \hline
  \end{tabular}
  \begin{tabular}{|c|}
    \hline
    Opção 6 [ms] \\
    \hline
    \input{dados/tt_6.tex}
    \hline
  \end{tabular}
  \caption{Tabela de tempo de processamento}
\end{table}
\newpage
\subsection{Médias e gráficos}
Devido ao grande número de dados decidimos por representar graficamente apenas as
médias e desvios de cada opção do menu[\ref{itm:tcpserver}].\\
\subsubsection{Cálculos}
A média calculada entre os pontos foi a média simples, em outras palavras, denominamos a 
média como \boxed{\mu} então, \boxed{\mu = \frac{1}{N}\sum_{i=1}^{N}\left(x_i\right)}, onde N
é o número de pontos, no caso desse projeto temos N=100 medidas para cada uma das opções de menu[\ref{itm:tcpserver}].\\
Já o desvio padrão amostral, denominado \boxed{\sigma} é calculado como \boxed{\sigma = \sqrt{\frac{1}{N}\sum_{i=1}^{N}\left(x_i - \mu\right)^2}}\\
Seja \boxed{\mu_t}, \boxed{\mu_p}, \boxed{\mu_c}, a média do tempo total, média do tempo de processamento e média do tempo de comunicação,
respectivamente, e o desvio padrão do tempo de comunicação, de
nominado \boxed{\sigma_c}.
\newpage
\begin{table}
  \centering
  \begin{tabular}{|c|c|c|c||c|}
    \hline
    Menu & \boxed{\mu_t} & \boxed{\mu_p} & \boxed{\mu_c} &  \boxed{\pm \sigma_c} \\
    \hline
    1 & 190559,24 & 59,13 & 190500,11 & 7720,62 (4,05\%)\\
    2 & 381804,32 & 191211,66 & 190592,66  & 3446,65 (1,80\%)\\
    3 & 383214,91 & 191636,56 & 191578,35 & 4483,76 (4,89\%)\\
    4 & 374492,29 & 557,72 & 373934,57 & 99632,35 (26,64\%)\\
    5 & 820829,07 & 571827,67 & 249001,40 & 64343,48 (25,84\%)\\
    6 & 382556,63 & 191372,81 & 191183,82 & 12192.48 (6,37\%)\\
    \hline
  \end{tabular}
  \caption{Tabela com médias e desvios}
\end{table}
\section{Conclusão}
Nota-se que as opções 1, 2, 3 e 6 têm o tempo de comunicação parecidos, uma vez que a quantidade de dados transmitida não difere muito um do outro. Já a opção 4 e 5 
possuem um alto tempo de comunicação (consequentemente alto tempo total) devido, respectivamente, ao grande volume de dados transmitidos e a quantidade de mensagens
de comunicação (o menu 5 requer ISBN, senha e quantidade em estoque).
\newpage
\section{Código fonte}
\subsection{error.c}
\begin{lstlisting}
#include "error.h"

void printError(int e){
  switch(e){
  case ERROR_SOCKET:
    perror("socket:: naco foi possivel criar um novo socket\n");
    break;
  case ERROR_SOCKET_CLIENT:
    perror("socket:: nao foi possivel conectar ao cliente\n");
    break;
  case ERROR_SOCKET_SEND:
    perror("socket:: nao foi possivel enviar mensagem para o servidor\n");
    break;
  case ERROR_SOCKET_SERVER_ERROR:
    perror("send_msg:: ocorreu um erro na comunicacao com o servidor, tente novamente");
    break;
  case ERROR_SOCKET_CLIENT_CLOSED:
    perror("receive_msg:: cliente fechou a conexao");
    break;
  case ERROR_SOCKET_SERVER_CLOSED:
    perror("send_msg:: servidor fechou a conexao");
    break;
  case ERROR_SOCKET_SERVER_BIND:
    perror("start_server:: ocorreu um erro com o bind");
    break;
  case ERROR_SOCKET_SERVER_LISTEN:
    perror("start_server:: ocorreu um erro com o listen");
    break;
  case ERROR_SOCKET_SERVER_ACCEPT:
    perror("start_server:: ocorreu um erro com o accept");
    break;
  case ERROR_USAGE_MAIN:
    printf("erro de entrada: tente ./main <num_porta> (para iniciar servidor) ou ./main <endereco_ip> <porta> para iniciar o cliente\n");
    break;
  case ERROR_USAGE_TEST:
    printf("erro de entrada: tente ./test <endereco_ip> <porta> para iniciar o cliente (o servidor deve estar up!)\n");
    break;
  case ERROR_FILE_OPEN:
    perror("archives:: Erro ao abrir arquivo\n");
    break;
  case ERROR_NUM_COLUNAS_BOOKS:
    printf("archives:: Arquivo com conteudo de livros corrompido. VEJA README PARA MAIS DETALHES\n");
    break;
  }
}
\end{lstlisting}
\end{document}
